// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.9.2
// source: battle.proto

package pb_battle

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pb_base "github.com/curio-research/keystone/game/proto/output/pb.base"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tile Change Struct
type LargeTileChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TileId          int64 `protobuf:"varint,1,opt,name=TileId,proto3" json:"TileId,omitempty"`
	PreviousOwnerId int32 `protobuf:"varint,2,opt,name=PreviousOwnerId,proto3" json:"PreviousOwnerId,omitempty"`
	NewOwnerId      int32 `protobuf:"varint,3,opt,name=NewOwnerId,proto3" json:"NewOwnerId,omitempty"`
	PreviousLevel   int32 `protobuf:"varint,4,opt,name=PreviousLevel,proto3" json:"PreviousLevel,omitempty"`
	NewLevel        int32 `protobuf:"varint,5,opt,name=NewLevel,proto3" json:"NewLevel,omitempty"`
	PreviousVisible bool  `protobuf:"varint,6,opt,name=PreviousVisible,proto3" json:"PreviousVisible,omitempty"`
	NewVisible      bool  `protobuf:"varint,7,opt,name=NewVisible,proto3" json:"NewVisible,omitempty"`
}

func (x *LargeTileChange) Reset() {
	*x = LargeTileChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargeTileChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargeTileChange) ProtoMessage() {}

func (x *LargeTileChange) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargeTileChange.ProtoReflect.Descriptor instead.
func (*LargeTileChange) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{0}
}

func (x *LargeTileChange) GetTileId() int64 {
	if x != nil {
		return x.TileId
	}
	return 0
}

func (x *LargeTileChange) GetPreviousOwnerId() int32 {
	if x != nil {
		return x.PreviousOwnerId
	}
	return 0
}

func (x *LargeTileChange) GetNewOwnerId() int32 {
	if x != nil {
		return x.NewOwnerId
	}
	return 0
}

func (x *LargeTileChange) GetPreviousLevel() int32 {
	if x != nil {
		return x.PreviousLevel
	}
	return 0
}

func (x *LargeTileChange) GetNewLevel() int32 {
	if x != nil {
		return x.NewLevel
	}
	return 0
}

func (x *LargeTileChange) GetPreviousVisible() bool {
	if x != nil {
		return x.PreviousVisible
	}
	return false
}

func (x *LargeTileChange) GetNewVisible() bool {
	if x != nil {
		return x.NewVisible
	}
	return false
}

// Troops Producing params
type C2S_Produce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            pb_base.TroopStackType   `protobuf:"varint,1,opt,name=Type,proto3,enum=pb_base.TroopStackType" json:"Type,omitempty"`
	Amount          int32                    `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	TargetLargeTile int64                    `protobuf:"varint,3,opt,name=TargetLargeTile,proto3" json:"TargetLargeTile,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,4,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_Produce) Reset() {
	*x = C2S_Produce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_Produce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_Produce) ProtoMessage() {}

func (x *C2S_Produce) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_Produce.ProtoReflect.Descriptor instead.
func (*C2S_Produce) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{1}
}

func (x *C2S_Produce) GetType() pb_base.TroopStackType {
	if x != nil {
		return x.Type
	}
	return pb_base.TroopStackType(0)
}

func (x *C2S_Produce) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *C2S_Produce) GetTargetLargeTile() int64 {
	if x != nil {
		return x.TargetLargeTile
	}
	return 0
}

func (x *C2S_Produce) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Troops Producing Building params
type C2S_ProduceBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            pb_base.BuildingType     `protobuf:"varint,1,opt,name=Type,proto3,enum=pb_base.BuildingType" json:"Type,omitempty"`
	TargetLargeTile int64                    `protobuf:"varint,2,opt,name=TargetLargeTile,proto3" json:"TargetLargeTile,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,3,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_ProduceBuilding) Reset() {
	*x = C2S_ProduceBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_ProduceBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_ProduceBuilding) ProtoMessage() {}

func (x *C2S_ProduceBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_ProduceBuilding.ProtoReflect.Descriptor instead.
func (*C2S_ProduceBuilding) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{2}
}

func (x *C2S_ProduceBuilding) GetType() pb_base.BuildingType {
	if x != nil {
		return x.Type
	}
	return pb_base.BuildingType(0)
}

func (x *C2S_ProduceBuilding) GetTargetLargeTile() int64 {
	if x != nil {
		return x.TargetLargeTile
	}
	return 0
}

func (x *C2S_ProduceBuilding) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Troops Movement params
type C2S_MoveTroops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TroopAmounts    []int64                  `protobuf:"varint,1,rep,packed,name=TroopAmounts,proto3" json:"TroopAmounts,omitempty"`
	StackIds        []int64                  `protobuf:"varint,2,rep,packed,name=StackIds,proto3" json:"StackIds,omitempty"`
	TargetLargeTile int64                    `protobuf:"varint,3,opt,name=TargetLargeTile,proto3" json:"TargetLargeTile,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,4,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_MoveTroops) Reset() {
	*x = C2S_MoveTroops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_MoveTroops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_MoveTroops) ProtoMessage() {}

func (x *C2S_MoveTroops) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_MoveTroops.ProtoReflect.Descriptor instead.
func (*C2S_MoveTroops) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{3}
}

func (x *C2S_MoveTroops) GetTroopAmounts() []int64 {
	if x != nil {
		return x.TroopAmounts
	}
	return nil
}

func (x *C2S_MoveTroops) GetStackIds() []int64 {
	if x != nil {
		return x.StackIds
	}
	return nil
}

func (x *C2S_MoveTroops) GetTargetLargeTile() int64 {
	if x != nil {
		return x.TargetLargeTile
	}
	return 0
}

func (x *C2S_MoveTroops) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Troops Attacking params
type C2S_Attack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackerTileId  int64                    `protobuf:"varint,1,opt,name=AttackerTileId,proto3" json:"AttackerTileId,omitempty"`
	TargetTileId    int64                    `protobuf:"varint,2,opt,name=TargetTileId,proto3" json:"TargetTileId,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,3,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_Attack) Reset() {
	*x = C2S_Attack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_Attack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_Attack) ProtoMessage() {}

func (x *C2S_Attack) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_Attack.ProtoReflect.Descriptor instead.
func (*C2S_Attack) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{4}
}

func (x *C2S_Attack) GetAttackerTileId() int64 {
	if x != nil {
		return x.AttackerTileId
	}
	return 0
}

func (x *C2S_Attack) GetTargetTileId() int64 {
	if x != nil {
		return x.TargetTileId
	}
	return 0
}

func (x *C2S_Attack) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Set Tank Guard Mode
type C2S_ToggleTankGuardMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TankStackId     int64                    `protobuf:"varint,1,opt,name=TankStackId,proto3" json:"TankStackId,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,2,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_ToggleTankGuardMode) Reset() {
	*x = C2S_ToggleTankGuardMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_ToggleTankGuardMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_ToggleTankGuardMode) ProtoMessage() {}

func (x *C2S_ToggleTankGuardMode) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_ToggleTankGuardMode.ProtoReflect.Descriptor instead.
func (*C2S_ToggleTankGuardMode) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{5}
}

func (x *C2S_ToggleTankGuardMode) GetTankStackId() int64 {
	if x != nil {
		return x.TankStackId
	}
	return 0
}

func (x *C2S_ToggleTankGuardMode) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Plane Load Troop
type C2S_PlaneLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaneStackId    int64                    `protobuf:"varint,1,opt,name=PlaneStackId,proto3" json:"PlaneStackId,omitempty"`
	OnGroundStack   *pb_base.TroopStack      `protobuf:"bytes,2,opt,name=OnGroundStack,proto3" json:"OnGroundStack,omitempty"`
	CarriedStack    *pb_base.TroopStack      `protobuf:"bytes,3,opt,name=CarriedStack,proto3" json:"CarriedStack,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,4,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_PlaneLoad) Reset() {
	*x = C2S_PlaneLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PlaneLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PlaneLoad) ProtoMessage() {}

func (x *C2S_PlaneLoad) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PlaneLoad.ProtoReflect.Descriptor instead.
func (*C2S_PlaneLoad) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{6}
}

func (x *C2S_PlaneLoad) GetPlaneStackId() int64 {
	if x != nil {
		return x.PlaneStackId
	}
	return 0
}

func (x *C2S_PlaneLoad) GetOnGroundStack() *pb_base.TroopStack {
	if x != nil {
		return x.OnGroundStack
	}
	return nil
}

func (x *C2S_PlaneLoad) GetCarriedStack() *pb_base.TroopStack {
	if x != nil {
		return x.CarriedStack
	}
	return nil
}

func (x *C2S_PlaneLoad) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Plane Load Troop
type C2S_PlaneUnload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaneStackId    int64                    `protobuf:"varint,1,opt,name=PlaneStackId,proto3" json:"PlaneStackId,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,2,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_PlaneUnload) Reset() {
	*x = C2S_PlaneUnload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PlaneUnload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PlaneUnload) ProtoMessage() {}

func (x *C2S_PlaneUnload) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PlaneUnload.ProtoReflect.Descriptor instead.
func (*C2S_PlaneUnload) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{7}
}

func (x *C2S_PlaneUnload) GetPlaneStackId() int64 {
	if x != nil {
		return x.PlaneStackId
	}
	return 0
}

func (x *C2S_PlaneUnload) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Upgrade Building
type C2S_UpgradeBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingId      int64                    `protobuf:"varint,1,opt,name=BuildingId,proto3" json:"BuildingId,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,2,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_UpgradeBuilding) Reset() {
	*x = C2S_UpgradeBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UpgradeBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UpgradeBuilding) ProtoMessage() {}

func (x *C2S_UpgradeBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UpgradeBuilding.ProtoReflect.Descriptor instead.
func (*C2S_UpgradeBuilding) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{8}
}

func (x *C2S_UpgradeBuilding) GetBuildingId() int64 {
	if x != nil {
		return x.BuildingId
	}
	return 0
}

func (x *C2S_UpgradeBuilding) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Upgrade Capital
type C2S_UpgradeCapital struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,1,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_UpgradeCapital) Reset() {
	*x = C2S_UpgradeCapital{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UpgradeCapital) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UpgradeCapital) ProtoMessage() {}

func (x *C2S_UpgradeCapital) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UpgradeCapital.ProtoReflect.Descriptor instead.
func (*C2S_UpgradeCapital) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{9}
}

func (x *C2S_UpgradeCapital) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Produce Blueprint
type C2S_ProduceBlueprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BluePrintType   pb_base.BluePrintType    `protobuf:"varint,1,opt,name=BluePrintType,proto3,enum=pb_base.BluePrintType" json:"BluePrintType,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,2,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_ProduceBlueprint) Reset() {
	*x = C2S_ProduceBlueprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_ProduceBlueprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_ProduceBlueprint) ProtoMessage() {}

func (x *C2S_ProduceBlueprint) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_ProduceBlueprint.ProtoReflect.Descriptor instead.
func (*C2S_ProduceBlueprint) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{10}
}

func (x *C2S_ProduceBlueprint) GetBluePrintType() pb_base.BluePrintType {
	if x != nil {
		return x.BluePrintType
	}
	return pb_base.BluePrintType(0)
}

func (x *C2S_ProduceBlueprint) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// [non-blocking] Result of Troop Producing
type S2C_Produce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducedStack *pb_base.TroopStack `protobuf:"bytes,1,opt,name=ProducedStack,proto3" json:"ProducedStack,omitempty"`
}

func (x *S2C_Produce) Reset() {
	*x = S2C_Produce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_Produce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_Produce) ProtoMessage() {}

func (x *S2C_Produce) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_Produce.ProtoReflect.Descriptor instead.
func (*S2C_Produce) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{11}
}

func (x *S2C_Produce) GetProducedStack() *pb_base.TroopStack {
	if x != nil {
		return x.ProducedStack
	}
	return nil
}

// [non-blocking] Result of Troop Movement
type S2C_CrossLargeTile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackId        int64 `protobuf:"varint,1,opt,name=StackId,proto3" json:"StackId,omitempty"`
	PreviousTileId int64 `protobuf:"varint,2,opt,name=PreviousTileId,proto3" json:"PreviousTileId,omitempty"`
	NewTileId      int64 `protobuf:"varint,3,opt,name=NewTileId,proto3" json:"NewTileId,omitempty"`
}

func (x *S2C_CrossLargeTile) Reset() {
	*x = S2C_CrossLargeTile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_CrossLargeTile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_CrossLargeTile) ProtoMessage() {}

func (x *S2C_CrossLargeTile) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_CrossLargeTile.ProtoReflect.Descriptor instead.
func (*S2C_CrossLargeTile) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{12}
}

func (x *S2C_CrossLargeTile) GetStackId() int64 {
	if x != nil {
		return x.StackId
	}
	return 0
}

func (x *S2C_CrossLargeTile) GetPreviousTileId() int64 {
	if x != nil {
		return x.PreviousTileId
	}
	return 0
}

func (x *S2C_CrossLargeTile) GetNewTileId() int64 {
	if x != nil {
		return x.NewTileId
	}
	return 0
}

// [non-blocking] Result of Troop Movement Plan Path
type S2C_MoveTroopsPlanningPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovePlans []*pb_base.MovePlan `protobuf:"bytes,1,rep,name=MovePlans,proto3" json:"MovePlans,omitempty"`
}

func (x *S2C_MoveTroopsPlanningPath) Reset() {
	*x = S2C_MoveTroopsPlanningPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_MoveTroopsPlanningPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_MoveTroopsPlanningPath) ProtoMessage() {}

func (x *S2C_MoveTroopsPlanningPath) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_MoveTroopsPlanningPath.ProtoReflect.Descriptor instead.
func (*S2C_MoveTroopsPlanningPath) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{13}
}

func (x *S2C_MoveTroopsPlanningPath) GetMovePlans() []*pb_base.MovePlan {
	if x != nil {
		return x.MovePlans
	}
	return nil
}

// [non-blocking] Result of Troop Movement
type S2C_MoveComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovedStack *pb_base.TroopStack `protobuf:"bytes,1,opt,name=MovedStack,proto3" json:"MovedStack,omitempty"`
}

func (x *S2C_MoveComplete) Reset() {
	*x = S2C_MoveComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_MoveComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_MoveComplete) ProtoMessage() {}

func (x *S2C_MoveComplete) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_MoveComplete.ProtoReflect.Descriptor instead.
func (*S2C_MoveComplete) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{14}
}

func (x *S2C_MoveComplete) GetMovedStack() *pb_base.TroopStack {
	if x != nil {
		return x.MovedStack
	}
	return nil
}

// [non-blocking] When Troops move to same position, one troop stack remains, another troop will get merged
type S2C_MergeTroops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergedStackId       int64               `protobuf:"varint,1,opt,name=MergedStackId,proto3" json:"MergedStackId,omitempty"`
	ExistingStack       *pb_base.TroopStack `protobuf:"bytes,2,opt,name=ExistingStack,proto3" json:"ExistingStack,omitempty"`
	LoadedMergedStackId int64               `protobuf:"varint,3,opt,name=LoadedMergedStackId,proto3" json:"LoadedMergedStackId,omitempty"`
	LoadedExistingStack *pb_base.TroopStack `protobuf:"bytes,4,opt,name=LoadedExistingStack,proto3" json:"LoadedExistingStack,omitempty"`
}

func (x *S2C_MergeTroops) Reset() {
	*x = S2C_MergeTroops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_MergeTroops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_MergeTroops) ProtoMessage() {}

func (x *S2C_MergeTroops) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_MergeTroops.ProtoReflect.Descriptor instead.
func (*S2C_MergeTroops) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{15}
}

func (x *S2C_MergeTroops) GetMergedStackId() int64 {
	if x != nil {
		return x.MergedStackId
	}
	return 0
}

func (x *S2C_MergeTroops) GetExistingStack() *pb_base.TroopStack {
	if x != nil {
		return x.ExistingStack
	}
	return nil
}

func (x *S2C_MergeTroops) GetLoadedMergedStackId() int64 {
	if x != nil {
		return x.LoadedMergedStackId
	}
	return 0
}

func (x *S2C_MergeTroops) GetLoadedExistingStack() *pb_base.TroopStack {
	if x != nil {
		return x.LoadedExistingStack
	}
	return nil
}

// [non-blocking] Result of Troop Attack
type S2C_Attack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVictory    bool    `protobuf:"varint,1,opt,name=IsVictory,proto3" json:"IsVictory,omitempty"`
	AttackerId   int64   `protobuf:"varint,2,opt,name=AttackerId,proto3" json:"AttackerId,omitempty"`
	StackIds     []int64 `protobuf:"varint,3,rep,packed,name=StackIds,proto3" json:"StackIds,omitempty"`         // winner stack ids
	TroopAmounts []int64 `protobuf:"varint,4,rep,packed,name=TroopAmounts,proto3" json:"TroopAmounts,omitempty"` // winner stack troop amounts
}

func (x *S2C_Attack) Reset() {
	*x = S2C_Attack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_Attack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_Attack) ProtoMessage() {}

func (x *S2C_Attack) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_Attack.ProtoReflect.Descriptor instead.
func (*S2C_Attack) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{16}
}

func (x *S2C_Attack) GetIsVictory() bool {
	if x != nil {
		return x.IsVictory
	}
	return false
}

func (x *S2C_Attack) GetAttackerId() int64 {
	if x != nil {
		return x.AttackerId
	}
	return 0
}

func (x *S2C_Attack) GetStackIds() []int64 {
	if x != nil {
		return x.StackIds
	}
	return nil
}

func (x *S2C_Attack) GetTroopAmounts() []int64 {
	if x != nil {
		return x.TroopAmounts
	}
	return nil
}

// [non-blocking] Result of Tile Metadata Change
type S2C_LargeTileChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeTileChangeList []*LargeTileChange `protobuf:"bytes,1,rep,name=LargeTileChangeList,proto3" json:"LargeTileChangeList,omitempty"`
}

func (x *S2C_LargeTileChange) Reset() {
	*x = S2C_LargeTileChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_LargeTileChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_LargeTileChange) ProtoMessage() {}

func (x *S2C_LargeTileChange) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_LargeTileChange.ProtoReflect.Descriptor instead.
func (*S2C_LargeTileChange) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{17}
}

func (x *S2C_LargeTileChange) GetLargeTileChangeList() []*LargeTileChange {
	if x != nil {
		return x.LargeTileChangeList
	}
	return nil
}

// [non-blocking] Result of setting tank guard mode
type S2C_ToggleTankGuardMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TankStackId int64 `protobuf:"varint,1,opt,name=TankStackId,proto3" json:"TankStackId,omitempty"`
	IsGuarding  bool  `protobuf:"varint,2,opt,name=IsGuarding,proto3" json:"IsGuarding,omitempty"`
}

func (x *S2C_ToggleTankGuardMode) Reset() {
	*x = S2C_ToggleTankGuardMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_ToggleTankGuardMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_ToggleTankGuardMode) ProtoMessage() {}

func (x *S2C_ToggleTankGuardMode) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_ToggleTankGuardMode.ProtoReflect.Descriptor instead.
func (*S2C_ToggleTankGuardMode) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{18}
}

func (x *S2C_ToggleTankGuardMode) GetTankStackId() int64 {
	if x != nil {
		return x.TankStackId
	}
	return 0
}

func (x *S2C_ToggleTankGuardMode) GetIsGuarding() bool {
	if x != nil {
		return x.IsGuarding
	}
	return false
}

// [non-blocking] Result of Building Producing
type S2C_ProduceBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducedBuilding *pb_base.Building `protobuf:"bytes,1,opt,name=ProducedBuilding,proto3" json:"ProducedBuilding,omitempty"`
}

func (x *S2C_ProduceBuilding) Reset() {
	*x = S2C_ProduceBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_ProduceBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_ProduceBuilding) ProtoMessage() {}

func (x *S2C_ProduceBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_ProduceBuilding.ProtoReflect.Descriptor instead.
func (*S2C_ProduceBuilding) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{19}
}

func (x *S2C_ProduceBuilding) GetProducedBuilding() *pb_base.Building {
	if x != nil {
		return x.ProducedBuilding
	}
	return nil
}

// [non-blocking] Result of Plane Load Troop
type S2C_PlaneLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaneStack    *pb_base.TroopStack `protobuf:"bytes,1,opt,name=PlaneStack,proto3" json:"PlaneStack,omitempty"`
	OriginalStack *pb_base.TroopStack `protobuf:"bytes,2,opt,name=OriginalStack,proto3" json:"OriginalStack,omitempty"`
	LoadedStack   *pb_base.TroopStack `protobuf:"bytes,3,opt,name=LoadedStack,proto3" json:"LoadedStack,omitempty"`
}

func (x *S2C_PlaneLoad) Reset() {
	*x = S2C_PlaneLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PlaneLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PlaneLoad) ProtoMessage() {}

func (x *S2C_PlaneLoad) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PlaneLoad.ProtoReflect.Descriptor instead.
func (*S2C_PlaneLoad) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{20}
}

func (x *S2C_PlaneLoad) GetPlaneStack() *pb_base.TroopStack {
	if x != nil {
		return x.PlaneStack
	}
	return nil
}

func (x *S2C_PlaneLoad) GetOriginalStack() *pb_base.TroopStack {
	if x != nil {
		return x.OriginalStack
	}
	return nil
}

func (x *S2C_PlaneLoad) GetLoadedStack() *pb_base.TroopStack {
	if x != nil {
		return x.LoadedStack
	}
	return nil
}

// [non-blocking] Result of Plane Unload Troop
type S2C_PlaneUnload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaneStack    *pb_base.TroopStack `protobuf:"bytes,1,opt,name=PlaneStack,proto3" json:"PlaneStack,omitempty"`
	MergedStackId int64               `protobuf:"varint,2,opt,name=MergedStackId,proto3" json:"MergedStackId,omitempty"`
	GroundStack   *pb_base.TroopStack `protobuf:"bytes,3,opt,name=GroundStack,proto3" json:"GroundStack,omitempty"`
}

func (x *S2C_PlaneUnload) Reset() {
	*x = S2C_PlaneUnload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PlaneUnload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PlaneUnload) ProtoMessage() {}

func (x *S2C_PlaneUnload) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PlaneUnload.ProtoReflect.Descriptor instead.
func (*S2C_PlaneUnload) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{21}
}

func (x *S2C_PlaneUnload) GetPlaneStack() *pb_base.TroopStack {
	if x != nil {
		return x.PlaneStack
	}
	return nil
}

func (x *S2C_PlaneUnload) GetMergedStackId() int64 {
	if x != nil {
		return x.MergedStackId
	}
	return 0
}

func (x *S2C_PlaneUnload) GetGroundStack() *pb_base.TroopStack {
	if x != nil {
		return x.GroundStack
	}
	return nil
}

// [non-blocking] Result of Upgrade Building
type S2C_UpgradeBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradedBuilding *pb_base.Building `protobuf:"bytes,1,opt,name=UpgradedBuilding,proto3" json:"UpgradedBuilding,omitempty"`
}

func (x *S2C_UpgradeBuilding) Reset() {
	*x = S2C_UpgradeBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UpgradeBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UpgradeBuilding) ProtoMessage() {}

func (x *S2C_UpgradeBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UpgradeBuilding.ProtoReflect.Descriptor instead.
func (*S2C_UpgradeBuilding) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{22}
}

func (x *S2C_UpgradeBuilding) GetUpgradedBuilding() *pb_base.Building {
	if x != nil {
		return x.UpgradedBuilding
	}
	return nil
}

// [non-blocking] Result of Upgrade Capital
type S2C_UpgradeCapital struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradedCapital *pb_base.Capital `protobuf:"bytes,1,opt,name=UpgradedCapital,proto3" json:"UpgradedCapital,omitempty"`
}

func (x *S2C_UpgradeCapital) Reset() {
	*x = S2C_UpgradeCapital{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UpgradeCapital) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UpgradeCapital) ProtoMessage() {}

func (x *S2C_UpgradeCapital) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UpgradeCapital.ProtoReflect.Descriptor instead.
func (*S2C_UpgradeCapital) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{23}
}

func (x *S2C_UpgradeCapital) GetUpgradedCapital() *pb_base.Capital {
	if x != nil {
		return x.UpgradedCapital
	}
	return nil
}

// [non-blocking] Result of Produce Blueprint
type S2C_ProduceBlueprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blueprint *pb_base.Blueprint `protobuf:"bytes,1,opt,name=Blueprint,proto3" json:"Blueprint,omitempty"`
}

func (x *S2C_ProduceBlueprint) Reset() {
	*x = S2C_ProduceBlueprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battle_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_ProduceBlueprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_ProduceBlueprint) ProtoMessage() {}

func (x *S2C_ProduceBlueprint) ProtoReflect() protoreflect.Message {
	mi := &file_battle_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_ProduceBlueprint.ProtoReflect.Descriptor instead.
func (*S2C_ProduceBlueprint) Descriptor() ([]byte, []int) {
	return file_battle_proto_rawDescGZIP(), []int{24}
}

func (x *S2C_ProduceBlueprint) GetBlueprint() *pb_base.Blueprint {
	if x != nil {
		return x.Blueprint
	}
	return nil
}

var File_battle_proto protoreflect.FileDescriptor

var file_battle_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x70, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x4e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4e, 0x65, 0x77,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x43, 0x32, 0x53, 0x5f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x43,
	0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x0e,
	0x43, 0x32, 0x53, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9c, 0x01, 0x0a,
	0x0a, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7f, 0x0a, 0x17, 0x43,
	0x32, 0x53, 0x5f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x61, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xeb, 0x01, 0x0a,
	0x0d, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0d,
	0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a,
	0x0c, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72,
	0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x79, 0x0a, 0x0f, 0x43, 0x32,
	0x53, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x79, 0x0a, 0x13, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x58, 0x0a, 0x12, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x43,
	0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x48, 0x0a, 0x0b, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22,
	0x74, 0x0a, 0x12, 0x53, 0x32, 0x43, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x54, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x54, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x65, 0x77, 0x54,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x53, 0x32, 0x43, 0x5f, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x53, 0x32, 0x43, 0x5f, 0x4d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xeb, 0x01,
	0x0a, 0x0f, 0x53, 0x32, 0x43, 0x5f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x6f, 0x6f, 0x70,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x0d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x8a, 0x01, 0x0a, 0x0a,
	0x53, 0x32, 0x43, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x6f, 0x6f,
	0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x53, 0x32, 0x43, 0x5f,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x62, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a,
	0x17, 0x53, 0x32, 0x43, 0x5f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x54, 0x0a, 0x13, 0x53, 0x32,
	0x43, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x3d, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x4c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x53, 0x32,
	0x43, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x33, 0x0a,
	0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22,
	0x54, 0x0a, 0x13, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x0f, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x22, 0x48, 0x0a, 0x14, 0x53, 0x32, 0x43, 0x5f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x42, 0x0b, 0x5a, 0x09, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_battle_proto_rawDescOnce sync.Once
	file_battle_proto_rawDescData = file_battle_proto_rawDesc
)

func file_battle_proto_rawDescGZIP() []byte {
	file_battle_proto_rawDescOnce.Do(func() {
		file_battle_proto_rawDescData = protoimpl.X.CompressGZIP(file_battle_proto_rawDescData)
	})
	return file_battle_proto_rawDescData
}

var file_battle_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_battle_proto_goTypes = []interface{}{
	(*LargeTileChange)(nil),            // 0: pb_battle.LargeTileChange
	(*C2S_Produce)(nil),                // 1: pb_battle.C2S_Produce
	(*C2S_ProduceBuilding)(nil),        // 2: pb_battle.C2S_ProduceBuilding
	(*C2S_MoveTroops)(nil),             // 3: pb_battle.C2S_MoveTroops
	(*C2S_Attack)(nil),                 // 4: pb_battle.C2S_Attack
	(*C2S_ToggleTankGuardMode)(nil),    // 5: pb_battle.C2S_ToggleTankGuardMode
	(*C2S_PlaneLoad)(nil),              // 6: pb_battle.C2S_PlaneLoad
	(*C2S_PlaneUnload)(nil),            // 7: pb_battle.C2S_PlaneUnload
	(*C2S_UpgradeBuilding)(nil),        // 8: pb_battle.C2S_UpgradeBuilding
	(*C2S_UpgradeCapital)(nil),         // 9: pb_battle.C2S_UpgradeCapital
	(*C2S_ProduceBlueprint)(nil),       // 10: pb_battle.C2S_ProduceBlueprint
	(*S2C_Produce)(nil),                // 11: pb_battle.S2C_Produce
	(*S2C_CrossLargeTile)(nil),         // 12: pb_battle.S2C_CrossLargeTile
	(*S2C_MoveTroopsPlanningPath)(nil), // 13: pb_battle.S2C_MoveTroopsPlanningPath
	(*S2C_MoveComplete)(nil),           // 14: pb_battle.S2C_MoveComplete
	(*S2C_MergeTroops)(nil),            // 15: pb_battle.S2C_MergeTroops
	(*S2C_Attack)(nil),                 // 16: pb_battle.S2C_Attack
	(*S2C_LargeTileChange)(nil),        // 17: pb_battle.S2C_LargeTileChange
	(*S2C_ToggleTankGuardMode)(nil),    // 18: pb_battle.S2C_ToggleTankGuardMode
	(*S2C_ProduceBuilding)(nil),        // 19: pb_battle.S2C_ProduceBuilding
	(*S2C_PlaneLoad)(nil),              // 20: pb_battle.S2C_PlaneLoad
	(*S2C_PlaneUnload)(nil),            // 21: pb_battle.S2C_PlaneUnload
	(*S2C_UpgradeBuilding)(nil),        // 22: pb_battle.S2C_UpgradeBuilding
	(*S2C_UpgradeCapital)(nil),         // 23: pb_battle.S2C_UpgradeCapital
	(*S2C_ProduceBlueprint)(nil),       // 24: pb_battle.S2C_ProduceBlueprint
	(pb_base.TroopStackType)(0),        // 25: pb_base.TroopStackType
	(*pb_base.IdentityPayload)(nil),    // 26: pb_base.IdentityPayload
	(pb_base.BuildingType)(0),          // 27: pb_base.BuildingType
	(*pb_base.TroopStack)(nil),         // 28: pb_base.TroopStack
	(pb_base.BluePrintType)(0),         // 29: pb_base.BluePrintType
	(*pb_base.MovePlan)(nil),           // 30: pb_base.MovePlan
	(*pb_base.Building)(nil),           // 31: pb_base.Building
	(*pb_base.Capital)(nil),            // 32: pb_base.Capital
	(*pb_base.Blueprint)(nil),          // 33: pb_base.Blueprint
}
var file_battle_proto_depIdxs = []int32{
	25, // 0: pb_battle.C2S_Produce.Type:type_name -> pb_base.TroopStackType
	26, // 1: pb_battle.C2S_Produce.IdentityPayload:type_name -> pb_base.IdentityPayload
	27, // 2: pb_battle.C2S_ProduceBuilding.Type:type_name -> pb_base.BuildingType
	26, // 3: pb_battle.C2S_ProduceBuilding.IdentityPayload:type_name -> pb_base.IdentityPayload
	26, // 4: pb_battle.C2S_MoveTroops.IdentityPayload:type_name -> pb_base.IdentityPayload
	26, // 5: pb_battle.C2S_Attack.IdentityPayload:type_name -> pb_base.IdentityPayload
	26, // 6: pb_battle.C2S_ToggleTankGuardMode.IdentityPayload:type_name -> pb_base.IdentityPayload
	28, // 7: pb_battle.C2S_PlaneLoad.OnGroundStack:type_name -> pb_base.TroopStack
	28, // 8: pb_battle.C2S_PlaneLoad.CarriedStack:type_name -> pb_base.TroopStack
	26, // 9: pb_battle.C2S_PlaneLoad.IdentityPayload:type_name -> pb_base.IdentityPayload
	26, // 10: pb_battle.C2S_PlaneUnload.IdentityPayload:type_name -> pb_base.IdentityPayload
	26, // 11: pb_battle.C2S_UpgradeBuilding.IdentityPayload:type_name -> pb_base.IdentityPayload
	26, // 12: pb_battle.C2S_UpgradeCapital.IdentityPayload:type_name -> pb_base.IdentityPayload
	29, // 13: pb_battle.C2S_ProduceBlueprint.BluePrintType:type_name -> pb_base.BluePrintType
	26, // 14: pb_battle.C2S_ProduceBlueprint.IdentityPayload:type_name -> pb_base.IdentityPayload
	28, // 15: pb_battle.S2C_Produce.ProducedStack:type_name -> pb_base.TroopStack
	30, // 16: pb_battle.S2C_MoveTroopsPlanningPath.MovePlans:type_name -> pb_base.MovePlan
	28, // 17: pb_battle.S2C_MoveComplete.MovedStack:type_name -> pb_base.TroopStack
	28, // 18: pb_battle.S2C_MergeTroops.ExistingStack:type_name -> pb_base.TroopStack
	28, // 19: pb_battle.S2C_MergeTroops.LoadedExistingStack:type_name -> pb_base.TroopStack
	0,  // 20: pb_battle.S2C_LargeTileChange.LargeTileChangeList:type_name -> pb_battle.LargeTileChange
	31, // 21: pb_battle.S2C_ProduceBuilding.ProducedBuilding:type_name -> pb_base.Building
	28, // 22: pb_battle.S2C_PlaneLoad.PlaneStack:type_name -> pb_base.TroopStack
	28, // 23: pb_battle.S2C_PlaneLoad.OriginalStack:type_name -> pb_base.TroopStack
	28, // 24: pb_battle.S2C_PlaneLoad.LoadedStack:type_name -> pb_base.TroopStack
	28, // 25: pb_battle.S2C_PlaneUnload.PlaneStack:type_name -> pb_base.TroopStack
	28, // 26: pb_battle.S2C_PlaneUnload.GroundStack:type_name -> pb_base.TroopStack
	31, // 27: pb_battle.S2C_UpgradeBuilding.UpgradedBuilding:type_name -> pb_base.Building
	32, // 28: pb_battle.S2C_UpgradeCapital.UpgradedCapital:type_name -> pb_base.Capital
	33, // 29: pb_battle.S2C_ProduceBlueprint.Blueprint:type_name -> pb_base.Blueprint
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_battle_proto_init() }
func file_battle_proto_init() {
	if File_battle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_battle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargeTileChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_Produce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_ProduceBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_MoveTroops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_Attack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_ToggleTankGuardMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PlaneLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PlaneUnload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UpgradeBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UpgradeCapital); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_ProduceBlueprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_Produce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_CrossLargeTile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_MoveTroopsPlanningPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_MoveComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_MergeTroops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_Attack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_LargeTileChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_ToggleTankGuardMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_ProduceBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PlaneLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PlaneUnload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UpgradeBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UpgradeCapital); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battle_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_ProduceBlueprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_battle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_battle_proto_goTypes,
		DependencyIndexes: file_battle_proto_depIdxs,
		MessageInfos:      file_battle_proto_msgTypes,
	}.Build()
	File_battle_proto = out.File
	file_battle_proto_rawDesc = nil
	file_battle_proto_goTypes = nil
	file_battle_proto_depIdxs = nil
}
