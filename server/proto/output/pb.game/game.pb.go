// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.9.2
// source: game.proto

package pb_game

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pb_base "github.com/curio-research/keystone/game/proto/output/pb.base"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Register Player in battle once connected
type C2S_EstablishPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId int64 `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
}

func (x *C2S_EstablishPlayer) Reset() {
	*x = C2S_EstablishPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_EstablishPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_EstablishPlayer) ProtoMessage() {}

func (x *C2S_EstablishPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_EstablishPlayer.ProtoReflect.Descriptor instead.
func (*C2S_EstablishPlayer) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

func (x *C2S_EstablishPlayer) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// Fetch Current Game State
type C2S_GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,1,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_GameState) Reset() {
	*x = C2S_GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GameState) ProtoMessage() {}

func (x *C2S_GameState) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GameState.ProtoReflect.Descriptor instead.
func (*C2S_GameState) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

func (x *C2S_GameState) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Fetch Current Game Preparation State
type C2S_PreparationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,1,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_PreparationState) Reset() {
	*x = C2S_PreparationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PreparationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PreparationState) ProtoMessage() {}

func (x *C2S_PreparationState) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PreparationState.ProtoReflect.Descriptor instead.
func (*C2S_PreparationState) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

func (x *C2S_PreparationState) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Sending ping to server to test network latency & report whether player is alive
type C2S_Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp       int64                    `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,2,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_Ping) Reset() {
	*x = C2S_Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_Ping) ProtoMessage() {}

func (x *C2S_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_Ping.ProtoReflect.Descriptor instead.
func (*C2S_Ping) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{3}
}

func (x *C2S_Ping) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *C2S_Ping) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Player claims dealer role when game starts
type C2S_ClaimDealer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,1,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_ClaimDealer) Reset() {
	*x = C2S_ClaimDealer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_ClaimDealer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_ClaimDealer) ProtoMessage() {}

func (x *C2S_ClaimDealer) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_ClaimDealer.ProtoReflect.Descriptor instead.
func (*C2S_ClaimDealer) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{4}
}

func (x *C2S_ClaimDealer) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Player marks ready stage when game starts
type C2S_PlayerReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,1,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_PlayerReady) Reset() {
	*x = C2S_PlayerReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PlayerReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PlayerReady) ProtoMessage() {}

func (x *C2S_PlayerReady) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PlayerReady.ProtoReflect.Descriptor instead.
func (*C2S_PlayerReady) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{5}
}

func (x *C2S_PlayerReady) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// Player marks unready stage when game starts
type C2S_PlayerUnready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityPayload *pb_base.IdentityPayload `protobuf:"bytes,1,opt,name=IdentityPayload,proto3" json:"IdentityPayload,omitempty"`
}

func (x *C2S_PlayerUnready) Reset() {
	*x = C2S_PlayerUnready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PlayerUnready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PlayerUnready) ProtoMessage() {}

func (x *C2S_PlayerUnready) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PlayerUnready.ProtoReflect.Descriptor instead.
func (*C2S_PlayerUnready) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{6}
}

func (x *C2S_PlayerUnready) GetIdentityPayload() *pb_base.IdentityPayload {
	if x != nil {
		return x.IdentityPayload
	}
	return nil
}

// [blocking] Result of Establish a player
type S2C_EstablishPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *S2C_EstablishPlayer) Reset() {
	*x = S2C_EstablishPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_EstablishPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_EstablishPlayer) ProtoMessage() {}

func (x *S2C_EstablishPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_EstablishPlayer.ProtoReflect.Descriptor instead.
func (*S2C_EstablishPlayer) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{7}
}

// [blocking] Result of fetching current game state
type S2C_GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game            *pb_base.Game             `protobuf:"bytes,1,opt,name=Game,proto3" json:"Game,omitempty"`
	Round           *pb_base.Round            `protobuf:"bytes,2,opt,name=Round,proto3" json:"Round,omitempty"`
	PlayerList      []*pb_base.Player         `protobuf:"bytes,3,rep,name=PlayerList,proto3" json:"PlayerList,omitempty"`
	TileList        []*pb_base.Tile           `protobuf:"bytes,4,rep,name=TileList,proto3" json:"TileList,omitempty"`
	TroopStackList  []*pb_base.TroopStack     `protobuf:"bytes,5,rep,name=TroopStackList,proto3" json:"TroopStackList,omitempty"`
	CapitalList     []*pb_base.Capital        `protobuf:"bytes,6,rep,name=CapitalList,proto3" json:"CapitalList,omitempty"`
	BuildingList    []*pb_base.Building       `protobuf:"bytes,7,rep,name=BuildingList,proto3" json:"BuildingList,omitempty"`
	MovePlanList    []*pb_base.SimpleMovePlan `protobuf:"bytes,8,rep,name=MovePlanList,proto3" json:"MovePlanList,omitempty"`
	PlayerTokenList []*pb_base.Token          `protobuf:"bytes,9,rep,name=PlayerTokenList,proto3" json:"PlayerTokenList,omitempty"`
	BlueprintList   []*pb_base.Blueprint      `protobuf:"bytes,10,rep,name=BlueprintList,proto3" json:"BlueprintList,omitempty"`
	PlayerCardDeck  *pb_base.CardDeck         `protobuf:"bytes,11,opt,name=PlayerCardDeck,proto3" json:"PlayerCardDeck,omitempty"`
}

func (x *S2C_GameState) Reset() {
	*x = S2C_GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GameState) ProtoMessage() {}

func (x *S2C_GameState) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GameState.ProtoReflect.Descriptor instead.
func (*S2C_GameState) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{8}
}

func (x *S2C_GameState) GetGame() *pb_base.Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *S2C_GameState) GetRound() *pb_base.Round {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *S2C_GameState) GetPlayerList() []*pb_base.Player {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

func (x *S2C_GameState) GetTileList() []*pb_base.Tile {
	if x != nil {
		return x.TileList
	}
	return nil
}

func (x *S2C_GameState) GetTroopStackList() []*pb_base.TroopStack {
	if x != nil {
		return x.TroopStackList
	}
	return nil
}

func (x *S2C_GameState) GetCapitalList() []*pb_base.Capital {
	if x != nil {
		return x.CapitalList
	}
	return nil
}

func (x *S2C_GameState) GetBuildingList() []*pb_base.Building {
	if x != nil {
		return x.BuildingList
	}
	return nil
}

func (x *S2C_GameState) GetMovePlanList() []*pb_base.SimpleMovePlan {
	if x != nil {
		return x.MovePlanList
	}
	return nil
}

func (x *S2C_GameState) GetPlayerTokenList() []*pb_base.Token {
	if x != nil {
		return x.PlayerTokenList
	}
	return nil
}

func (x *S2C_GameState) GetBlueprintList() []*pb_base.Blueprint {
	if x != nil {
		return x.BlueprintList
	}
	return nil
}

func (x *S2C_GameState) GetPlayerCardDeck() *pb_base.CardDeck {
	if x != nil {
		return x.PlayerCardDeck
	}
	return nil
}

// [blocking] Result of ping
type S2C_Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp int64 `protobuf:"varint,1,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
}

func (x *S2C_Ping) Reset() {
	*x = S2C_Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_Ping) ProtoMessage() {}

func (x *S2C_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_Ping.ProtoReflect.Descriptor instead.
func (*S2C_Ping) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{9}
}

func (x *S2C_Ping) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// [non-blocking] Common Game Error Message
type S2C_ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *S2C_ServerMessage) Reset() {
	*x = S2C_ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_ServerMessage) ProtoMessage() {}

func (x *S2C_ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_ServerMessage.ProtoReflect.Descriptor instead.
func (*S2C_ServerMessage) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{10}
}

func (x *S2C_ServerMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// [non-blocking] Result of claiming dealer
type S2C_ClaimDealer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPlayerList []*pb_base.Player `protobuf:"bytes,1,rep,name=CurrentPlayerList,proto3" json:"CurrentPlayerList,omitempty"`
}

func (x *S2C_ClaimDealer) Reset() {
	*x = S2C_ClaimDealer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_ClaimDealer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_ClaimDealer) ProtoMessage() {}

func (x *S2C_ClaimDealer) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_ClaimDealer.ProtoReflect.Descriptor instead.
func (*S2C_ClaimDealer) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{11}
}

func (x *S2C_ClaimDealer) GetCurrentPlayerList() []*pb_base.Player {
	if x != nil {
		return x.CurrentPlayerList
	}
	return nil
}

// [non-blocking] Result of player marks ready
type S2C_PlayerReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPlayerList []*pb_base.Player `protobuf:"bytes,1,rep,name=CurrentPlayerList,proto3" json:"CurrentPlayerList,omitempty"`
}

func (x *S2C_PlayerReady) Reset() {
	*x = S2C_PlayerReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PlayerReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PlayerReady) ProtoMessage() {}

func (x *S2C_PlayerReady) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PlayerReady.ProtoReflect.Descriptor instead.
func (*S2C_PlayerReady) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{12}
}

func (x *S2C_PlayerReady) GetCurrentPlayerList() []*pb_base.Player {
	if x != nil {
		return x.CurrentPlayerList
	}
	return nil
}

// [non-blocking] Result of player marks unready
type S2C_PlayerUnready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPlayerList []*pb_base.Player `protobuf:"bytes,1,rep,name=CurrentPlayerList,proto3" json:"CurrentPlayerList,omitempty"`
}

func (x *S2C_PlayerUnready) Reset() {
	*x = S2C_PlayerUnready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PlayerUnready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PlayerUnready) ProtoMessage() {}

func (x *S2C_PlayerUnready) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PlayerUnready.ProtoReflect.Descriptor instead.
func (*S2C_PlayerUnready) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{13}
}

func (x *S2C_PlayerUnready) GetCurrentPlayerList() []*pb_base.Player {
	if x != nil {
		return x.CurrentPlayerList
	}
	return nil
}

// [non-blocking] Game Start Event
type S2C_GameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameState *S2C_GameState `protobuf:"bytes,1,opt,name=GameState,proto3" json:"GameState,omitempty"`
}

func (x *S2C_GameStart) Reset() {
	*x = S2C_GameStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GameStart) ProtoMessage() {}

func (x *S2C_GameStart) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GameStart.ProtoReflect.Descriptor instead.
func (*S2C_GameStart) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{14}
}

func (x *S2C_GameStart) GetGameState() *S2C_GameState {
	if x != nil {
		return x.GameState
	}
	return nil
}

// [non-blocking] Game End Event
type S2C_GameEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *S2C_GameEnd) Reset() {
	*x = S2C_GameEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GameEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GameEnd) ProtoMessage() {}

func (x *S2C_GameEnd) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GameEnd.ProtoReflect.Descriptor instead.
func (*S2C_GameEnd) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{15}
}

// [blocking] Result of fetching current game preparation state
type S2C_PreparationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerList []*pb_base.Player `protobuf:"bytes,1,rep,name=PlayerList,proto3" json:"PlayerList,omitempty"`
}

func (x *S2C_PreparationState) Reset() {
	*x = S2C_PreparationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_PreparationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_PreparationState) ProtoMessage() {}

func (x *S2C_PreparationState) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_PreparationState.ProtoReflect.Descriptor instead.
func (*S2C_PreparationState) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{16}
}

func (x *S2C_PreparationState) GetPlayerList() []*pb_base.Player {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

var File_game_proto protoreflect.FileDescriptor

var file_game_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x62,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x32, 0x53, 0x5f, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x14, 0x43, 0x32, 0x53,
	0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6c, 0x0a, 0x08, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x43, 0x32,
	0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x42, 0x0a,
	0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x32,
	0x43, 0x5f, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x22, 0xc8, 0x04, 0x0a, 0x0d, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x08, 0x54, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x08,
	0x54, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x54, 0x72, 0x6f, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0e, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0b, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x0e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x22, 0x28, 0x0a, 0x08,
	0x53, 0x32, 0x43, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x32, 0x43, 0x5f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x0f, 0x53, 0x32, 0x43, 0x5f, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x0f, 0x53, 0x32, 0x43, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x11, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x11, 0x53, 0x32, 0x43,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3d,
	0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x0a,
	0x0d, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x32, 0x43, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x53, 0x32, 0x43, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x09, 0x5a, 0x07,
	0x70, 0x62, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_proto_rawDescOnce sync.Once
	file_game_proto_rawDescData = file_game_proto_rawDesc
)

func file_game_proto_rawDescGZIP() []byte {
	file_game_proto_rawDescOnce.Do(func() {
		file_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_proto_rawDescData)
	})
	return file_game_proto_rawDescData
}

var file_game_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_game_proto_goTypes = []interface{}{
	(*C2S_EstablishPlayer)(nil),     // 0: pb_game.C2S_EstablishPlayer
	(*C2S_GameState)(nil),           // 1: pb_game.C2S_GameState
	(*C2S_PreparationState)(nil),    // 2: pb_game.C2S_PreparationState
	(*C2S_Ping)(nil),                // 3: pb_game.C2S_Ping
	(*C2S_ClaimDealer)(nil),         // 4: pb_game.C2S_ClaimDealer
	(*C2S_PlayerReady)(nil),         // 5: pb_game.C2S_PlayerReady
	(*C2S_PlayerUnready)(nil),       // 6: pb_game.C2S_PlayerUnready
	(*S2C_EstablishPlayer)(nil),     // 7: pb_game.S2C_EstablishPlayer
	(*S2C_GameState)(nil),           // 8: pb_game.S2C_GameState
	(*S2C_Ping)(nil),                // 9: pb_game.S2C_Ping
	(*S2C_ServerMessage)(nil),       // 10: pb_game.S2C_ServerMessage
	(*S2C_ClaimDealer)(nil),         // 11: pb_game.S2C_ClaimDealer
	(*S2C_PlayerReady)(nil),         // 12: pb_game.S2C_PlayerReady
	(*S2C_PlayerUnready)(nil),       // 13: pb_game.S2C_PlayerUnready
	(*S2C_GameStart)(nil),           // 14: pb_game.S2C_GameStart
	(*S2C_GameEnd)(nil),             // 15: pb_game.S2C_GameEnd
	(*S2C_PreparationState)(nil),    // 16: pb_game.S2C_PreparationState
	(*pb_base.IdentityPayload)(nil), // 17: pb_base.IdentityPayload
	(*pb_base.Game)(nil),            // 18: pb_base.Game
	(*pb_base.Round)(nil),           // 19: pb_base.Round
	(*pb_base.Player)(nil),          // 20: pb_base.Player
	(*pb_base.Tile)(nil),            // 21: pb_base.Tile
	(*pb_base.TroopStack)(nil),      // 22: pb_base.TroopStack
	(*pb_base.Capital)(nil),         // 23: pb_base.Capital
	(*pb_base.Building)(nil),        // 24: pb_base.Building
	(*pb_base.SimpleMovePlan)(nil),  // 25: pb_base.SimpleMovePlan
	(*pb_base.Token)(nil),           // 26: pb_base.Token
	(*pb_base.Blueprint)(nil),       // 27: pb_base.Blueprint
	(*pb_base.CardDeck)(nil),        // 28: pb_base.CardDeck
}
var file_game_proto_depIdxs = []int32{
	17, // 0: pb_game.C2S_GameState.IdentityPayload:type_name -> pb_base.IdentityPayload
	17, // 1: pb_game.C2S_PreparationState.IdentityPayload:type_name -> pb_base.IdentityPayload
	17, // 2: pb_game.C2S_Ping.IdentityPayload:type_name -> pb_base.IdentityPayload
	17, // 3: pb_game.C2S_ClaimDealer.IdentityPayload:type_name -> pb_base.IdentityPayload
	17, // 4: pb_game.C2S_PlayerReady.IdentityPayload:type_name -> pb_base.IdentityPayload
	17, // 5: pb_game.C2S_PlayerUnready.IdentityPayload:type_name -> pb_base.IdentityPayload
	18, // 6: pb_game.S2C_GameState.Game:type_name -> pb_base.Game
	19, // 7: pb_game.S2C_GameState.Round:type_name -> pb_base.Round
	20, // 8: pb_game.S2C_GameState.PlayerList:type_name -> pb_base.Player
	21, // 9: pb_game.S2C_GameState.TileList:type_name -> pb_base.Tile
	22, // 10: pb_game.S2C_GameState.TroopStackList:type_name -> pb_base.TroopStack
	23, // 11: pb_game.S2C_GameState.CapitalList:type_name -> pb_base.Capital
	24, // 12: pb_game.S2C_GameState.BuildingList:type_name -> pb_base.Building
	25, // 13: pb_game.S2C_GameState.MovePlanList:type_name -> pb_base.SimpleMovePlan
	26, // 14: pb_game.S2C_GameState.PlayerTokenList:type_name -> pb_base.Token
	27, // 15: pb_game.S2C_GameState.BlueprintList:type_name -> pb_base.Blueprint
	28, // 16: pb_game.S2C_GameState.PlayerCardDeck:type_name -> pb_base.CardDeck
	20, // 17: pb_game.S2C_ClaimDealer.CurrentPlayerList:type_name -> pb_base.Player
	20, // 18: pb_game.S2C_PlayerReady.CurrentPlayerList:type_name -> pb_base.Player
	20, // 19: pb_game.S2C_PlayerUnready.CurrentPlayerList:type_name -> pb_base.Player
	8,  // 20: pb_game.S2C_GameStart.GameState:type_name -> pb_game.S2C_GameState
	20, // 21: pb_game.S2C_PreparationState.PlayerList:type_name -> pb_base.Player
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_game_proto_init() }
func file_game_proto_init() {
	if File_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_EstablishPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PreparationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_ClaimDealer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PlayerReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PlayerUnready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_EstablishPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_ClaimDealer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PlayerReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PlayerUnready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GameStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GameEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_PreparationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_game_proto_goTypes,
		DependencyIndexes: file_game_proto_depIdxs,
		MessageInfos:      file_game_proto_msgTypes,
	}.Build()
	File_game_proto = out.File
	file_game_proto_rawDesc = nil
	file_game_proto_goTypes = nil
	file_game_proto_depIdxs = nil
}
